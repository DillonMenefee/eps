{"name":"EPS","tagline":"Embedded PowerShell (Templating tool for PowerShell)","body":"EPS\r\n===\r\nEPS (Embedded PowerShell), inspired by erb, is a templating system that embeds PowerShell code into a text document. It is often used to embed PowerShell code in an HTML document, similar to ASP, JSP and PHP.<br/>\r\nThe most common use that the author can image is to render reports based on HTML pages (on Windows platforms). Or it may works for a rails-like or sinatra-like framework that somebody creates for PowerShell.\r\n\r\n### Usage\r\nEPS allows PowerShell code to be embedded within a pair of <% and %>, or <%= and %>, etc. delimiters. These embedded code blocks are then evaluated in-place (they are replaced by the result of their evaluation).<br/>\r\nCode in <% %> delimiters will be treated as expressions or commands which help to generate text; Code in <%= %> delimiters is treated as values; Text in <%# %> delimiters will be treated as comments which is ignored in compiling process.\r\n\r\nHere's the example:\r\n\r\ntest.eps:\r\n```\r\nHi <%= $name %>\r\n\r\n<%# this is a comment %>\r\nPlease buy me the following items:\r\n<% 1..5 | %{ %>\r\n  - <%= $_ %> pigs ...\r\n<% } %>\r\n\r\nDave is a <% if($true) { %> boy <% } else { %> girl <% } %>. \r\n\r\nThanks,\r\nDave\r\n<%= (Get-Date -f yyyy-MM-dd) %>\r\n```\r\n\r\nThen type some commands:\r\n```powershell\r\n. .\\eps.ps1  # don't forget to load\r\n\r\n$text = gc .\\test.eps\r\n$text = $text -join \"`n\"\r\n$name = \"ABC\"\r\nEPS-Render $text\r\n# here it uses non-safe mode\r\n# To use safe mode: using 'EPS-Render $text -safe' can compile in another PowerShell instance\r\n# to avoid variables polluted by current context\r\n```\r\n_NOTE_<br/>\r\n__EPS-Render__ accepts a string as inputted template. ```$text``` here is an array so it needs to be concated with ```\"`n\"```.<br/>\r\nIn the following samples you'll see some input are in a ```@' '@``` block which is a string.\r\n\r\nIt will produce:\r\n```\r\nHi ABC\r\n\r\nPlease buy me the following items:\r\n  - 1 pigs ...\r\n  - 2 pigs ...\r\n  - 3 pigs ...\r\n  - 4 pigs ...\r\n  - 5 pigs ...\r\n\r\nDave is a boy.\r\n\r\nThanks,\r\nDave\r\n2014-06-09\r\n```\r\n\r\nOr you can use safe mode with data bindings:\r\n```powershell\r\n$text = gc .\\test.eps\r\n$text = $text -join \"`n\"\r\nEPS-Render $text -safe -binding @{ name = \"dave\" }\r\n```\r\n\r\n### More examples and notes\r\n+ any result from a ```<% %>``` pair will be placed at the top\r\n\r\n```powershell\r\n$template = @'\r\nHi, dave is a <% if($true) { \"boy\" } else { \"girl\" } %>\r\n'@\r\n\r\nEPS-Render $template\r\n```\r\nwill produce:\r\n```\r\nboy\r\nHi, dave is a \r\n```\r\n\r\nalso, if template is\r\n```\r\nHi dave\r\nDon't watch TV.\r\n\r\nYour wife\r\n<% get-date -f yyyy-MM-dd %>\r\n```\r\nwill produce:\r\n````\r\n2014-06-10\r\nHi dave\r\nDon't watch TV.\r\n\r\nYour wife\r\n```\r\n_NOTE_<br/>\r\n```<%= $(get-date -f yyyy-MM-dd) %>``` produces the date string at the same place.\r\n\r\n\r\n+ you can use multi-line <% %> block\r\nsuch as:\r\n```powershell\r\n$template = @'\r\n\r\n<%\r\n  $name = \"dave\"\r\n  \r\n  1..5 | %{\r\n    \"haha\"\r\n  }\r\n%>\r\n\r\nHello, I'm <%= $name %>.\r\n'@\r\n\r\nEPS-Render $template\r\n```\r\nwill produce:\r\n```\r\nhaha\r\nhaha\r\nhaha\r\nhaha\r\nhaha\r\n\r\nHello, I'm dave.\r\n```\r\n\r\nRemember if you add variables in the template directly, they will be used in that template.\r\n\r\n\r\n\r\n\r\n## Contribute\r\nPlease try out and help to find more bugs! \r\nAuthor email: eyaswoo@163.com\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}