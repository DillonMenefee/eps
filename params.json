{
  "name": "eps",
  "tagline": "embedded PowerShell (templating tool for PowerShell)",
  "body": "[![Build status](https://ci.appveyor.com/api/projects/status/dkkgi7fg8fsubqph?svg=true)](https://ci.appveyor.com/project/dbroeglin/eps)\r\n\r\nEPS\r\n===\r\nEPS ( *Embedded PowerShell* ), inspired by erb, is a templating tool that renders PowerShell code into text document, conceptually and syntactically similar to erb for Ruby or twig for PHP, etc.    \r\n\r\n>EPS is uploaded to [PowerShellGallary](https://www.powershellgallery.com/packages/EPS/0.2.0).\r\nAnd (if the gallary works well) You can install the module with command:\r\n```\r\nPS> Install-Module -Name EPS \r\n```\r\n\r\n### Syntax\r\nEPS allows PowerShell code to be embedded within a pair of `<% ... %>`, `<%= ... %>`, or `<%# ... %>` as well:\r\n\r\n- Code in `<% ... %>` blocks are treated as statements or commands\r\n- Code in `<%= ... %>` blocks are treated as values or expressions   \r\n- Text in `<%# ... %>` blocks are treated as comment which will be ignored in compilation    \r\n\r\n> \r\nYou can write multiple-line commands in a ```<% ... %>``` block.\r\nYou can also write code which produce text output in `<% ... %>` blocks, instead of using a `<%= ... %>` block.\r\nBut in this style the output text is not produced **in-place** for sure    \r\n\r\n### Commandline usage\r\n\r\n```\r\nExpand-Template [[-template] $inline_template_str] | [-file $template_file] [-safe -binding $params_hash]\r\n```   \r\n   \r\n\r\n- use **-template** to provide template text via a commandline param rather than a file\r\n- if **-file** exists, it ignores **-template** param and render the template content in the file   \r\n- **-safe** renders template in **isolated** mode (in another thread/powershell space) to avoid variable pollution (variable name already in current context)    \r\n- if **-safe** is provided, you should bind your values using **-binding** option with a hashtable containing k-v pairs   \r\n\r\n### Example\r\n\r\nIn a template file 'test.eps':   \r\n\r\n```\r\nHi <%= $name %>\r\n\r\n<%# this is a comment %>\r\nPlease buy me the following items:\r\n<% 1..5 | %{ %>\r\n  - <%= $_ %> pigs ...\r\n<% } %>\r\n\r\nDave is a <% if($true) { %> boy <% } else { %> girl <% } %>. \r\n\r\nThanks,\r\nDave\r\n<%= (Get-Date -f yyyy-MM-dd) %>\r\n```\r\n\r\nThen render it in commandline:\r\n```powershell\r\n. .\\eps.ps1  # load this tool into current PowerShell space\r\n\r\n$name = \"ABC\"\r\nExpand-Template -file test.eps\r\n```\r\n\r\n>  \r\nHere it is in non-safe mode (render template with values in current run space)\r\nTo use safe mode: using `Expand-Template -file test.eps -safe` with binding values\r\n   \r\n\r\nIt will produce:   \r\n\r\n```\r\nHi ABC\r\n\r\nPlease buy me the following items:\r\n  - 1 pigs ...\r\n  - 2 pigs ...\r\n  - 3 pigs ...\r\n  - 4 pigs ...\r\n  - 5 pigs ...\r\n\r\nDave is a boy.\r\n\r\nThanks,\r\nDave\r\n2014-06-09\r\n```\r\n\r\nOr you can use safe mode with data bindings:\r\n```powershell\r\nExpand-Template -file $file_name -safe -binding @{ name = \"dave\" }\r\n```\r\nwhich will generate same output.\r\n\r\n### More examples\r\nany statement result in a `<% ... %>` block will be placed at the template top (that's why you should use `<%= ... %>` instead):   \r\n\r\n```powershell\r\n$template = @'\r\nHi, dave is a <% if($true) { \"boy\" } else { \"girl\" } %>\r\n'@\r\n\r\nExpand-Template -template $template\r\n```\r\nwill produce:   \r\n\r\n```\r\nboy\r\nHi, dave is a \r\n```\r\n\r\nfor another instance, if template is\r\n```\r\nHi dave\r\nDon't watch TV.\r\n\r\nYour wife\r\n<% get-date -f yyyy-MM-dd %>\r\n```\r\nIt will produce:   \r\n\r\n```\r\n2014-06-10\r\nHi dave\r\nDon't watch TV.\r\n\r\nYour wife\r\n```   \r\n\r\n> You should use `<%= ... %>` instead, since `<%= $(get-date -f yyyy-MM-dd) %>` produces the date string at the same place.\r\n\r\n   \r\nYou can use multi-line statements in `<% ... %>` block:   \r\n```powershell\r\n$template = @'\r\n\r\n<%\r\n  $name = \"dave\"\r\n  \r\n  1..5 | %{\r\n    \"haha\"\r\n  }\r\n%>\r\n\r\nHello, I'm <%= $name %>.\r\n'@\r\n\r\nExpand-Template -template $template\r\n```\r\n\r\nit will produce:   \r\n```\r\nhaha\r\nhaha\r\nhaha\r\nhaha\r\nhaha\r\n\r\nHello, I'm dave.\r\n```\r\n\r\n> Reminder: the output of statements in `<% ... %>` block will be put at top, not in-place \r\n\r\n\r\n## Contribution\r\n\r\n* Original version was written by [Dave Wu](https://github.com/straightdave).\r\n* Maintained now and extended by [Dominique Broeglin (@dbroeglin)](https://github.com/dbroeglin), thank you pal 谢谢！\r\n\r\nHelp find more bugs! Or find more usage of this tool ...\r\nAuthor's email: eyaswoo@163.com\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}